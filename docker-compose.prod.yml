version: '3.8'

services:
  web:
    build:
      context: .
      dockerfile: Dockerfile.prod
    image: kredigest-prod:latest
    restart: unless-stopped
    env_file:
      - .env.prod
    ports:
      - "80:5000"
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 30s
      restart_policy:
        condition: on-failure
        max_attempts: 3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  db:
    image: postgres:14-alpine
    env_file:
      - .env.prod
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./postgres/backups:/backups
    environment:
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    deploy:
      resources:
        limits:
          memory: 2G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6-alpine
    command: redis-server --requirepass $${REDIS_PASSWORD}
    volumes:
      - redisdata:/data
    env_file:
      - .env.prod
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "$${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  traefik:
    image: traefik:v2.6
    command:
      - "--providers.docker=true"
      - "--providers.docker.swarmMode=true"
      - "--entrypoints.web.address=:80"
      - "--certificatesresolvers.leresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.leresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.leresolver.acme.email=admin@kredigest.ht"
      - "--certificatesresolvers.leresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/letsencrypt:/letsencrypt
    deploy:
      placement:
        constraints:
          - node.role == manager

  celery:
    image: kredigest-prod:latest
    command: celery -A app.celery worker --loglevel=info
    env_file:
      - .env.prod
    deploy:
      replicas: 2
    depends_on:
      - redis
      - db

volumes:
  pgdata:
    driver: local
    driver_opts:
      type: nfs
      o: addr=nas.kredigest.ht,rw
      device: ":/volume1/pgdata"
  redisdata:
    driver: local
